import Foundation
import Security

final class KeychainHelper {
    static let shared = KeychainHelper()
    
    private init() {}

    func saveKey(_ key: String, label: String) {
        print("ðŸ”µ Tentative de sauvegarde de la clÃ© pour \(label)...")

        let data = key.data(using: .utf8) ?? Data()
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: label,
            kSecValueData as String: data,
            kSecAttrAccessible as String: kSecAttrAccessibleAfterFirstUnlock
        ]

        // VÃ©rifie si la clÃ© existe dÃ©jÃ 
        var existingItem: AnyObject?
        let statusCheck = SecItemCopyMatching(query as CFDictionary, &existingItem)
        
        if statusCheck == errSecSuccess {
            // La clÃ© existe dÃ©jÃ , on la met Ã  jour au lieu de la supprimer et recrÃ©er
            let updateQuery: [String: Any] = [kSecValueData as String: data]
            let statusUpdate = SecItemUpdate(query as CFDictionary, updateQuery as CFDictionary)
            
            if statusUpdate == errSecSuccess {
                print("ðŸŸ¢ Mise Ã  jour de la clÃ© existante rÃ©ussie - Code: \(statusUpdate)")
            } else {
                print("ðŸ”´ ERREUR: Ã‰chec de la mise Ã  jour de la clÃ© (Code: \(statusUpdate))")
            }
            return
        } else if statusCheck != errSecItemNotFound {
            print("ðŸ”´ ERREUR: Ã‰chec de la vÃ©rification de l'existence de la clÃ© (Code: \(statusCheck))")
        }

        // Ajout de la clÃ© si elle n'existe pas
        let statusAdd = SecItemAdd(query as CFDictionary, nil)
        if statusAdd == errSecSuccess {
            print("ðŸŸ¢ ClÃ© sauvegardÃ©e avec succÃ¨s.")
        } else {
            print("ðŸ”´ ERREUR: Impossible d'enregistrer la clÃ© API (Code: \(statusAdd))")
        }
    }

    func getKey(label: String) -> String? {
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: label,
            kSecReturnData as String: true,
            kSecMatchLimit as String: kSecMatchLimitOne
        ]
        
        var dataTypeRef: AnyObject?
        let status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)
        
        if status == errSecSuccess, let data = dataTypeRef as? Data {
            return String(data: data, encoding: .utf8)
        } else {
            switch status {
            case errSecItemNotFound:
                print("ðŸŸ¡ INFO: Aucune clÃ© trouvÃ©e pour \(label).")
            case errSecAuthFailed:
                print("ðŸ”´ ERREUR: Authentification au Keychain Ã©chouÃ©e.")
            default:
                print("ðŸ”´ ERREUR: Impossible de rÃ©cupÃ©rer la clÃ© API (Code: \(status))")
            }
            return nil
        }
    }
}
